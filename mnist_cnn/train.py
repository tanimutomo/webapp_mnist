import numpy as npimport torchimport torch.optim as optimimport torchvision.transforms as transformsfrom torch.utils.data import DataLoaderfrom torchvision.datasets import MNISTfrom model import CNN_mnist# prepare train data and test datatrain_data = MNIST('~/Project/deeplearning/mnist_data',        train=True, download=True,        transform=transforms.ToTensor())train_loader = DataLoader(train_data, batch_size=4,        shuffle=True)data_iter = iter(train_loader)images, labels = data_iter.next()classes = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')model = CNN_mnist()criterion = nn.CrossEntropyLoss()optimizer = optim.SGD(model.parameters(), lr=1e-3, momentum=0.9)for epoch in range(30):    running_loss = 0.0    for i, data in enumerate(train_loader, 0):        inputs, labels = data        optimizer.zero_grad()        outputs = model(inputs)        loss = criterion(outputs, labels)        loss.backward()        optimizer.step()        running_loss += loss.item()        if i % 2000 == 1999:            print('[%d, %6d] loss: %.3f' %                    (epoch + 1, i + 1, running_loss / 2000))            running_loss = 0.0print('Finished Training!')torch.save(model.state_dict(), 'mnist_model.pth')