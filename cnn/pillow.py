import numpy as npimport torchfrom PIL import Image, ImageOpsimport matplotlib.pyplot as pltdef convert_img(img_url): # load a RGB image original = Image.open(str(img_url))    w, h = original.size    if w != h:        rotate = True        plt.imshow(np.array(original.rotate(270)))    else:        plt.imshow(np.array(original))#    plt.show()    # original.save('./images/five_origin.png')    # convert img to png format    # original.save('./images/input.png')    # img = Image.open('./images/input.png')    # resize an image    img = original.resize((28, 28))    # img.save('./images/five_resize.png')    # reverse an image    img = ImageOps.invert(img)    # convert an image to gray scale    img = img.convert('L')    # img.save('./images/five_gray.png')    # rotate img    if rotate:        img = img.rotate(270)    # convert an image to numpy array    img_array = np.asarray(img).astype(np.float32)    # convert numpy to torch tensor    img_array = torch.from_numpy(img_array / 255.) # normalization    img_array = img_array.unsqueeze(0)    img_array = img_array.unsqueeze(0)    # img.save('./templates/images/output.png')    print(img_array.shape)    return img_arrayif __name__ == '__main__':    img = convert_img('./images/five.png')    # img = Image.fromarray(np.uint8(img * 255))    img.save('./images/five2.png')