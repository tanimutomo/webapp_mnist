from PIL import Image, ImageOpsimport numpy as npdef load_img(input_img):    pil_img = Image.open(input_img)    flg = False    if pil_img.width != pil_img.height:        flg = True    pil_img = ImageOps.invert(pil_img)    pil_img = pil_img.resize((28, 28)).convert("L")    if flg:        pil_img = pil_img.rotate(270)    inp_img =     return inp_imgdef predict(input_img):    input = load_img(input_img)    with open('param_linear.pkl', 'rb') as f:        param = _pickle.load(f)    w_index, w, b_index, b = param    output =     outputs = model(input)    _, predicted = torch.max(outputs, 1)    # print("prediction:", predicted[0].item())    return predicted[0].item()if __name__ == '__main__':    parser = argparse.ArgumentParser(description='predict the number of the input image')    parser.add_argument('--model', type=str, default='cnn', help='specfy the model you want to use')    parser.add_argument('--img_path', type=str, default='./images/IMG_5796.JPG', help='input image path')    args = parser.parse_args()    print(predict(args.img_path, args.model))